{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "VPC: public, private and db subnets in two availability zones. (fdp-1oc5gkoph)",
  "Metadata": {
      "AWS::CloudFormation::Interface": {
          "ParameterGroups": [
              {
                  "Label": {
                      "default": "Region Configuration"
                  },
                  "Parameters": [
                      "RegionAZ1Name",
                      "RegionAZ2Name"
                  ]
              },
              {
                  "Label": {
                      "default": "VPC Configuration"
                  },
                  "Parameters": [
                      "VPCCIDR"
                  ]
              },
              {
                  "Label": {
                      "default": "Public Subnet Configuration"
                  },
                  "Parameters": [
                      "SubnetAPublicCIDR",
                      "SubnetBPublicCIDR"
                  ]
              },
              {
                  "Label": {
                      "default": "Private Subnet Configuration"
                  },
                  "Parameters": [
                      "SubnetAPrivateCIDR",
                      "SubnetBPrivateCIDR"
                  ]
              },
              {
                "Label": {
                    "default": "DB Subnet Configuration"
                },
                "Parameters": [
                    "SubnetADbCIDR",
                    "SubnetBDbCIDR"
                ]
            },
              {
                  "Label": {
                      "default": "Linux Bastion Host Configuration"
                  },
                  "Parameters": [
                      "CreateBastionInstance",
                      "BastionInstanceType",
                      "EC2KeyPair",
                      "BastionSSHCIDR",
                      "LatestAmiId"
                  ]
              }
          ]
      }
  },
  "Parameters": {
      "RegionAZ1Name": {
          "Description": "Availability Zone 1 Name in Region",
          "Type": "AWS::EC2::AvailabilityZone::Name"
      },
      "RegionAZ2Name": {
          "Description": "Availability Zone 2 Name in Region",
          "Type": "AWS::EC2::AvailabilityZone::Name"
      },
      "VPCCIDR": {
          "Description": "CIDR block for the VPC",
          "Type": "String",
          "Default": "10.229.0.0/16",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      },
      "SubnetAPublicCIDR": {
          "Description": "CIDR block for the public subnet in availability zone",
          "Type": "String",
          "Default": "10.229.10.0/28",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      },
      "SubnetBPublicCIDR": {
          "Description": "CIDR block for the public subnet in availability zone",
          "Type": "String",
          "Default": "10.229.20.0/28",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      },
      "SubnetAPrivateCIDR": {
          "Description": "CIDR block for the private subnet in availability zone",
          "Type": "String",
          "Default": "10.229.30.0/20",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      },
      "SubnetBPrivateCIDR": {
          "Description": "CIDR block for the private subnet in availability zone",
          "Type": "String",
          "Default": "10.229.40.0/20",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      },
      "SubnetADbCIDR": {
          "Description": "CIDR block for the db subnet in availability zone",
          "Type": "String",
          "Default": "10.229.50.0/28",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      },
      "SubnetBDbCIDR": {
          "Description": "CIDR block for the private subnet in availability zone",
          "Type": "String",
          "Default": "10.229.60.0/28",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    },
      "CreateBastionInstance": {
          "Description": "Create a bastion instance inside the VPC",
          "Type": "String",
          "Default": false,
          "ConstraintDescription": "",
          "AllowedValues": [
              true,
              false
          ]
      },
      "BastionInstanceType": {
          "AllowedValues": [
              "t3.nano",
              "t3.micro",
              "t3.small",
              "t3.medium",
              "t3.large",
              "t2.nano",
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large"
          ],
          "Default": "t3.micro",
          "Description": "Amazon EC2 instance as the bastion instance",
          "Type": "String"
      },
      "EC2KeyPair": {
          "Description": "Name of existing EC2 key pair for production hosts",
          "Type": "AWS::EC2::KeyPair::KeyName"
      },
      "BastionSSHCIDR": {
          "Description": "CIDR block to allow access to bastion SSH",
          "Type": "String",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "LatestAmiId": {
          "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
          "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
      },
      "EnableVPCFlowLogs": {
          "Description": "Create a Flow logs for the VPC",
          "Type": "String",
          "Default": true,
          "ConstraintDescription": "",
          "AllowedValues": [
              true,
              false
          ]
      }
  },
  "Conditions": {
      "CreateBastionResources": {
          "Fn::Equals": [
              {
                  "Ref": "CreateBastionInstance"
              },
              true
          ]
      },
      "HasKeyName": {
          "Fn::Not": [
              {
                  "Fn::Equals": [
                      "",
                      {
                          "Ref": "EC2KeyPair"
                      }
                  ]
              }
          ]
      },
      "CreateVPCFlowLogs": {
          "Fn::Equals": [
              {
                  "Ref": "EnableVPCFlowLogs"
              },
              true
          ]
      }
  },
  "Resources": {
      "VPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
              "CidrBlock": {
                  "Ref": "VPCCIDR"
              },
              "EnableDnsSupport": true,
              "EnableDnsHostnames": true,
              "InstanceTenancy": "default",
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "SC-VPC-RA-${VPCCIDR}"
                      }
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "VPCFlowLogs": {
          "Condition": "CreateVPCFlowLogs",
          "Type": "AWS::EC2::FlowLog",
          "Properties": {
              "DeliverLogsPermissionArn": {
                  "Fn::GetAtt": ["FlowLogsRole","Arn"]
              },
              "LogGroupName": {
                  "Ref": "FlowLogGroup"
              },
              "ResourceId": {
                  "Ref": "VPC"
              },
              "ResourceType": "VPC",
              "TrafficType": "ALL"
          }
      },
      "FlowLogGroup": {
          "Condition": "CreateVPCFlowLogs",
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
              "RetentionInDays": 30
          }
      },
      "FlowLogsRole": {
          "Condition": "CreateVPCFlowLogs",
          "Type": "AWS::IAM::Role",
          "Properties": {
              "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Effect": "Allow",
                          "Principal": {
                              "Service": [
                                  "vpc-flow-logs.amazonaws.com"
                              ]
                          },
                          "Action": [
                              "sts:AssumeRole"
                          ]
                      }
                  ]
              },
              "Policies": [
                  {
                      "PolicyName": "flowlogs-policy",
                      "PolicyDocument": {
                         "Version" : "2012-10-17",
                         "Statement": [
                              {
                                  "Effect": "Allow",
                                  "Action": [
                                      "logs:CreateLogStream",
                                      "logs:PutLogEvents",
                                      "logs:DescribeLogGroups",
                                      "logs:DescribeLogStreams"
                                  ],
                                  "Resource": {
                                      "Fn::GetAtt": ["FlowLogGroup","Arn"]
                                  }
                              }
                          ]
                      }
                  }
              ]
          }
      },
      "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Ref": "VPCCIDR"
                      }
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "VPCGatewayAttachment": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "InternetGatewayId": {
                  "Ref": "InternetGateway"
              }
          }
      },
      "SubnetAPublic": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "AvailabilityZone": {
                  "Ref": "RegionAZ1Name"
              },
              "CidrBlock": {
                  "Ref": "SubnetAPublicCIDR"
              },
              "MapPublicIpOnLaunch": true,
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "A public - sc-vpc-ra"
                  },
                  {
                      "Key": "Reach",
                      "Value": "public"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "SubnetBPublic": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "AvailabilityZone": {
                  "Ref": "RegionAZ2Name"
              },
              "CidrBlock": {
                  "Ref": "SubnetBPublicCIDR"
              },
              "MapPublicIpOnLaunch": true,
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "B public - sc-vpc-ra"
                  },
                  {
                      "Key": "Reach",
                      "Value": "public"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "SubnetAPrivate": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "AvailabilityZone": {
                  "Ref": "RegionAZ1Name"
              },
              "CidrBlock": {
                  "Ref": "SubnetAPrivateCIDR"
              },
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "A private - sc-vpc-ra"
                  },
                  {
                      "Key": "Reach",
                      "Value": "private"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "SubnetBPrivate": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
              "AvailabilityZone": {
                  "Ref": "RegionAZ2Name"
              },
              "CidrBlock": {
                  "Ref": "SubnetBPrivateCIDR"
              },
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "B private - sc-vpc-ra"
                  },
                  {
                      "Key": "Reach",
                      "Value": "private"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "SubnetADb": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "RegionAZ1Name"
                },
                "CidrBlock": {
                    "Ref": "SubnetADbCIDR"
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "A db - sc-vpc-ra"
                    },
                    {
                        "Key": "Reach",
                        "Value": "db"
                    },
                    {
                        "Key": "Description",
                        "Value": "Service-Catalog-VPC-Reference-Architecture"
                    }
                ]
            }
      },
      "SubnetBDb": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "RegionAZ2Name"
                },
                "CidrBlock": {
                    "Ref": "SubnetBDbCIDR"
                },
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "B db - sc-vpc-ra"
                    },
                    {
                        "Key": "Reach",
                        "Value": "db"
                    },
                    {
                        "Key": "Description",
                        "Value": "Service-Catalog-VPC-Reference-Architecture"
                    }
                ]
            }
      },
      "RouteTableAPublic": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "A Public - sc-vpc-ra"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "RouteTableBPublic": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "B Public - sc-vpc-ra"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "RouteTableAPrivate": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "A Private - sc-vpc-ra"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "RouteTableBPrivate": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "B Private - sc-vpc-ra"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "RouteTableADb": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "db-rt-a"
                    },
                    {
                        "Key": "Description",
                        "Value": "Service-Catalog-VPC-Reference-Architecture"
                    }
                ]
            }
      },
      "RouteTableBDb": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "db-rt-b - sc-vpc-ra"
                    },
                    {
                        "Key": "Description",
                        "Value": "Service-Catalog-VPC-Reference-Architecture"
                    }
                ]
            }
      },
      "RouteTableAssociationAPublic": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetAPublic"
              },
              "RouteTableId": {
                  "Ref": "RouteTableAPublic"
              }
          }
      },
      "RouteTableAssociationBPublic": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetBPublic"
              },
              "RouteTableId": {
                  "Ref": "RouteTableBPublic"
              }
          }
      },
      "RouteTableAssociationAPrivate": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetAPrivate"
              },
              "RouteTableId": {
                  "Ref": "RouteTableAPrivate"
              }
          }
      },
      "RouteTableAssociationBPrivate": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetBPrivate"
              },
              "RouteTableId": {
                  "Ref": "RouteTableBPrivate"
              }
          }
      },
      "RouteTableAssociationADb": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "SubnetADb"
            },
            "RouteTableId": {
                "Ref": "RouteTableADb"
            }
        }
      },
      "RouteTableAssociationBDb": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "SubnetBDb"
                },
                "RouteTableId": {
                    "Ref": "RouteTableBDb"
                }
            }
      },
      "RouteTablePublicAInternetRoute": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "VPCGatewayAttachment",
          "Properties": {
              "RouteTableId": {
                  "Ref": "RouteTableAPublic"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                  "Ref": "InternetGateway"
              }
          }
      },
      "RouteTablePublicBInternetRoute": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "VPCGatewayAttachment",
          "Properties": {
              "RouteTableId": {
                  "Ref": "RouteTableBPublic"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                  "Ref": "InternetGateway"
              }
          }
      },
      "NetworkAclPublic": {
          "Type": "AWS::EC2::NetworkAcl",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "Public - sc-vpc-ra"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "NetworkAclPrivate": {
          "Type": "AWS::EC2::NetworkAcl",
          "Properties": {
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "Private - sc-vpc-ra"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "NetworkAclDb": {
        "Type": "AWS::EC2::NetworkAcl",
        "Properties": {
            "VpcId": {
                "Ref": "VPC"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": "Db - sc-vpc-ra"
                },
                {
                    "Key": "Description",
                    "Value": "Service-Catalog-VPC-Reference-Architecture"
                }
            ]
        }
      },
      "SubnetNetworkAclAssociationAPublic": {
          "Type": "AWS::EC2::SubnetNetworkAclAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetAPublic"
              },
              "NetworkAclId": {
                  "Ref": "NetworkAclPublic"
              }
          }
      },
      "SubnetNetworkAclAssociationBPublic": {
          "Type": "AWS::EC2::SubnetNetworkAclAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetBPublic"
              },
              "NetworkAclId": {
                  "Ref": "NetworkAclPublic"
              }
          }
      },
      "SubnetNetworkAclAssociationAPrivate": {
          "Type": "AWS::EC2::SubnetNetworkAclAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetAPrivate"
              },
              "NetworkAclId": {
                  "Ref": "NetworkAclPrivate"
              }
          }
      },
      "SubnetNetworkAclAssociationBPrivate": {
          "Type": "AWS::EC2::SubnetNetworkAclAssociation",
          "Properties": {
              "SubnetId": {
                  "Ref": "SubnetBPrivate"
              },
              "NetworkAclId": {
                  "Ref": "NetworkAclPrivate"
              }
          }
      },
      "SubnetNetworkAclAssociationADb": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "SubnetADb"
            },
            "NetworkAclId": {
                "Ref": "NetworkAclDb"
            }
        }
      },
      "SubnetNetworkAclAssociationBDb": {
        "Type": "AWS::EC2::SubnetNetworkAclAssociation",
        "Properties": {
            "SubnetId": {
                "Ref": "SubnetBDb"
            },
            "NetworkAclId": {
                "Ref": "NetworkAclDb"
            }
        }
      },
      "NetworkAclEntryInPublicAllowAll": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
              "NetworkAclId": {
                  "Ref": "NetworkAclPublic"
              },
              "RuleNumber": 99,
              "Protocol": -1,
              "RuleAction": "allow",
              "Egress": false,
              "CidrBlock": "0.0.0.0/0"
          }
      },
      "NetworkAclEntryOutPublicAllowAll": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
              "NetworkAclId": {
                  "Ref": "NetworkAclPublic"
              },
              "RuleNumber": 99,
              "Protocol": -1,
              "RuleAction": "allow",
              "Egress": true,
              "CidrBlock": "0.0.0.0/0"
          }
      },
      "NetworkAclEntryInPrivateAllowVPC": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
              "NetworkAclId": {
                  "Ref": "NetworkAclPrivate"
              },
              "RuleNumber": 99,
              "Protocol": -1,
              "RuleAction": "allow",
              "Egress": false,
              "CidrBlock": "0.0.0.0/0"
          }
      },
      "NetworkAclEntryOutPrivateAllowVPC": {
          "Type": "AWS::EC2::NetworkAclEntry",
          "Properties": {
              "NetworkAclId": {
                  "Ref": "NetworkAclPrivate"
              },
              "RuleNumber": 99,
              "Protocol": -1,
              "RuleAction": "allow",
              "Egress": true,
              "CidrBlock": "0.0.0.0/0"
          }
      },
      "BastionSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Condition": "CreateBastionResources",            
          "Properties": {
              "GroupDescription": "Enables SSH Access to Bastion Hosts",
              "VpcId": {
                  "Ref": "VPC"
              },
              "SecurityGroupIngress": [
                  {
                      "Description":"allow SSH",
                      "IpProtocol": "tcp",
                      "FromPort": "22",
                      "ToPort": "22",
                      "CidrIp": {
                          "Ref": "BastionSSHCIDR"
                      }
                  },
                  {
                      "Description":"allow icmp",
                      "IpProtocol": "icmp",
                      "FromPort": "-1",
                      "ToPort": "-1",
                      "CidrIp": {
                          "Ref": "BastionSSHCIDR"
                      }
                  }
              ],
              "SecurityGroupEgress":[
                  {
                      "Description":"allow all outgoing",
                      "IpProtocol" : "-1",
                      "CidrIp" : "0.0.0.0/0"
                  }
              ]
          }
      },        
      "BastionInstance": {
          "Type": "AWS::EC2::Instance",
          "Condition": "CreateBastionResources",
          "Properties": {
              "ImageId": {
                  "Ref":"LatestAmiId"
              },
              "InstanceType": {
                  "Ref": "BastionInstanceType"
              },
              "KeyName": {
                  "Fn::If": [
                      "HasKeyName",
                      {
                          "Ref": "EC2KeyPair"
                      },
                      {
                          "Ref": "AWS::NoValue"
                      }
                  ]
              },
              "Tags" : [
                  {"Key" : "Name", "Value" : {"Fn::Sub":"SC-BASTION-${VPC}"} }
              ],
              "NetworkInterfaces": [
                {
                  "GroupSet": [
                    {
                      "Ref": "BastionSecurityGroup"
                    }
                  ],
                  "AssociatePublicIpAddress": "true",
                  "DeviceIndex": "0",
                  "DeleteOnTermination": "true",
                  "SubnetId": {
                    "Ref": "SubnetAPublic"
                  }
                }
              ],
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Sub": "#!/bin/bash -xe\nyum -y update\n"
                  }
              }
          }
      },
      "NATGatewayA": {
          "DependsOn": "VPCGatewayAttachment",
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
              "AllocationId": {
                  "Fn::GetAtt": [
                      "NATGatewayAEIP",
                      "AllocationId"
                  ]
              },
              "SubnetId": {
                  "Ref": "SubnetAPublic"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "nat-gateway-Aside"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "NATGatewayAEIP": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
              "Domain": "vpc"
          }
      },
      "NATGatewayARoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
              "RouteTableId": {
                  "Ref": "RouteTableAPrivate"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                  "Ref": "NATGatewayA"
              }
          }
      },
      "NATGatewayB": {
          "DependsOn": "VPCGatewayAttachment",
          "Type": "AWS::EC2::NatGateway",
          "Properties": {
              "AllocationId": {
                  "Fn::GetAtt": [
                      "NATGatewayBEIP",
                      "AllocationId"
                  ]
              },
              "SubnetId": {
                  "Ref": "SubnetBPublic"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "nat-gateway-Bside"
                  },
                  {
                      "Key": "Description",
                      "Value": "Service-Catalog-VPC-Reference-Architecture"
                  }
              ]
          }
      },
      "NATGatewayBEIP": {
          "Type": "AWS::EC2::EIP",
          "Properties": {
              "Domain": "vpc"
          }
      },
      "NATGatewayBRoute": {
          "Type": "AWS::EC2::Route",
          "Properties": {
              "RouteTableId": {
                  "Ref": "RouteTableBPrivate"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "NatGatewayId": {
                  "Ref": "NATGatewayB"
              }
          }
      },
      "ECSCluster": {
        "Type": "AWS::ECS::Cluster"
      },
      "FargateContainerSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "GroupDescription": "Fargate container security group. Use this for all tasks and services.",
              "VpcId": {
                  "Ref": "VPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": "FargateContainerSecurityGroup"
                  }
              ]
          }
      },
      "EcsSecurityGroupIngressFromPublicALB": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
            "Description": "Ingress from the public ALB",
            "GroupId": {
                "Ref": "FargateContainerSecurityGroup"
            },
            "IpProtocol": -1,
            "SourceSecurityGroupId": {
                "Ref": "PublicLoadBalancerSG"
            }
        }
      },
      "EcsSecurityGroupIngressFromPrivateALB": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
            "Description": "Ingress from the private ALB",
            "GroupId": {
                "Ref": "FargateContainerSecurityGroup"
            },
            "IpProtocol": -1,
            "SourceSecurityGroupId": {
                "Ref": "PrivateLoadBalancerSG"
            }
        }
      },
      "EcsSecurityGroupIngressFromSelf": {
        "Type": "AWS::EC2::SecurityGroupIngress",
        "Properties": {
            "Description": "Ingress from other containers in the same security group",
            "GroupId": {
                "Ref": "FargateContainerSecurityGroup"
            },
            "IpProtocol": -1,
            "SourceSecurityGroupId": {
                "Ref": "FargateContainerSecurityGroup"
            }
        }
    },
    "PublicLoadBalancerSG": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription": "Public facing load balancer Security Group",
            "VpcId": {
                "Ref": "VPC"
            },
            "SecurityGroupIngress": [
                {
                    "CidrIp": "0.0.0.0/0",
                    "IpProtocol": -1
                }
            ]
        }
    },
    "PublicLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
          "Scheme": "internet-facing",
          "LoadBalancerAttributes": [
              {
                  "Key": "idle_timeout.timeout_seconds",
                  "Value": "30"
              }
          ],
          "Subnets": [
              {
                  "Ref": "SubnetAPublic"
              },
              {
                  "Ref": "SubnetBPublic"
              }
          ],
          "SecurityGroups": [
              {
                  "Ref": "PublicLoadBalancerSG"
              }
          ]
      }
    },
    "PrivateLoadBalancerSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
          "GroupDescription": "Internal load balancer security group",
          "VpcId": {
              "Ref": "VPC"
          }
      }
    },
    "PrivateLoadBalancerIngressFromECS": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
          "Description": "Only accept traffic from a container in the fargate container security group",
          "GroupId": {
              "Ref": "PrivateLoadBalancerSG"
          },
          "IpProtocol": -1,
          "SourceSecurityGroupId": {
              "Ref": "FargateContainerSecurityGroup"
          }
      }
    },
    "PrivateLoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
          "Scheme": "internal",
          "LoadBalancerAttributes": [
              {
                  "Key": "idle_timeout.timeout_seconds",
                  "Value": "30"
              }
          ],
          "Subnets": [
              {
                  "Ref": "SubnetAPrivate"
              },
              {
                  "Ref": "SubnetBPrivate"
              }
          ],
          "SecurityGroups": [
              {
                  "Ref": "PrivateLoadBalancerSG"
              }
          ]
      }
    },
  "ECSRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
        "AssumeRolePolicyDocument": {
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [
                            "ecs.amazonaws.com"
                        ]
                    },
                    "Action": [
                        "sts:AssumeRole"
                    ]
                }
            ]
        },
        "Path": "/",
        "Policies": [
            {
                "PolicyName": "ecs-service",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:AttachNetworkInterface",
                                "ec2:CreateNetworkInterface",
                                "ec2:CreateNetworkInterfacePermission",
                                "ec2:DeleteNetworkInterface",
                                "ec2:DeleteNetworkInterfacePermission",
                                "ec2:Describe*",
                                "ec2:DetachNetworkInterface",
                                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                "elasticloadbalancing:DeregisterTargets",
                                "elasticloadbalancing:Describe*",
                                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                "elasticloadbalancing:RegisterTargets"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        ]
    }
  },
  "ECSTaskExecutionRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
        "AssumeRolePolicyDocument": {
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": [
                            "ecs-tasks.amazonaws.com"
                        ]
                    },
                    "Action": [
                        "sts:AssumeRole"
                    ]
                }
            ]
        },
        "Path": "/",
        "Policies": [
            {
                "PolicyName": "AmazonECSTaskExecutionRolePolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:GetAuthorizationToken",
                                "ecr:BatchCheckLayerAvailability",
                                "ecr:GetDownloadUrlForLayer",
                                "ecr:BatchGetImage",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents",
                                "logs:CreateLogGroup",
                                "logs:DescribeLogStreams"
                            ],
                            "Resource": "*"
                        }
                    ]
                }
            }
        ]
      }
    }
  },
  "Outputs": {
      "TemplateID": {
          "Value": "service-catalog-reference-architectures/sc-vpc-ra"
      },
      "AWSRegionName": {
          "Value": {
              "Ref": "AWS::Region"
          }
      },
      "RegionAZ1Name": {
          "Value": {
              "Ref": "RegionAZ1Name"
          }
      },
      "RegionAZ2Name": {
          "Value": {
              "Ref": "RegionAZ2Name"
          }
      },
      "VPCCIDR": {
          "Value": {
              "Fn::GetAtt": ["VPC","CidrBlock"]
          }
      },
      "SubnetAPublicCIDR": {
          "Value": {
              "Ref": "SubnetAPublicCIDR"
          }
      },
      "SubnetBPublicCIDR": {
          "Value": {
              "Ref": "SubnetBPublicCIDR"
          }
      },
      "SubnetAPrivateCIDR": {
          "Value": {
              "Ref": "SubnetAPrivateCIDR"
          }
      },
      "SubnetBPrivateCIDR": {
          "Value": {
              "Ref": "SubnetAPrivateCIDR"
          }
      },
      "InternetGatewayID": {
          "Value": {
              "Ref": "InternetGateway"
          }
      },
      "NATGatewayAID": {
          "Value": {
              "Ref": "NATGatewayA"
          }
      },
      "NATGatewayAEIP": {
          "Value": {
              "Ref": "NATGatewayAEIP"
          }
      },
      "NATGatewayBID": {
          "Value": {
              "Ref": "NATGatewayB"
          }
      },
      "NATGatewayBEIP": {
          "Value": {
              "Ref": "NATGatewayBEIP"
          }
      },
      "RouteTableAPublic": {
          "Value": {
              "Ref": "RouteTableAPublic"
          }
      },
      "RouteTableBPublic": {
          "Value": {
              "Ref": "RouteTableBPublic"
          }
      },
      "RouteTableAPrivate": {
          "Value": {
              "Ref": "RouteTableAPrivate"
          }
      },
      "RouteTableBPrivate": {
          "Value": {
              "Ref": "RouteTableBPrivate"
          }
      },
      "NetworkAclPublic": {
          "Value": {
              "Ref": "NetworkAclPublic"
          }
      },
      "NetworkAclPrivate": {
          "Value": {
              "Ref": "NetworkAclPrivate"
          }
      },
      "CreatedBastionInstance": {
          "Value": {
              "Ref": "BastionInstance"
          },
          "Condition": "CreateBastionResources"
      },
      "BastionInstanceType": {
          "Value": {
              "Ref": "BastionInstanceType"
          },
          "Condition": "CreateBastionResources"
      },
      "BastionInstancePublicIP": {
          "Value": { "Fn::GetAtt" : ["BastionInstance", "PublicDnsName"] },
          "Condition": "CreateBastionResources"
      },
      "BastionSecurityGroupID": {
          "Value": {
              "Ref": "BastionSecurityGroup"
          },
          "Condition": "CreateBastionResources"
      },
      "EC2KeyPair": {
          "Value": {
              "Fn::If": [
                  "HasKeyName",
                  {
                      "Ref": "EC2KeyPair"
                  },
                  {
                      "Ref": "AWS::NoValue"
                  }
              ]
          },
          "Condition": "CreateBastionResources"
      },
      "BastionSSHCIDR": {
          "Value": {
              "Ref": "BastionSSHCIDR"
          },
          "Condition": "CreateBastionResources"
      },
      "ClusterName": {
        "Description": "The name of the ECS cluster",
        "Value": {
            "Ref": "ECSCluster"
        },
        "Export": {
            "Name": "FargateClusterName"
        }
      },
      "ExternalUrl": {
        "Description": "The url of the external load balancer",
        "Value": {
            "Fn::Join": [
                "",
                [
                    "http://",
                    {
                        "Fn::GetAtt": [
                            "PublicLoadBalancer",
                            "DNSName"
                        ]
                    }
                ]
            ]
        },
        "Export": {
            "Name": {
                "Fn::Join": [
                    ":",
                    [
                        {
                            "Ref": "AWS::StackName"
                        },
                        "ExternalUrl"
                    ]
                ]
            }
        }
      },
      "ECSPublicLoadBalancer": {
        "Description": "The ARN of the Public LoadBalancer",
        "Value": {
            "Ref": "PublicLoadBalancer"
        },
        "Export": {
            "Name": "ECSPublicLoadBalancer"
        }
      },
      "ECSTaskExecutionRole": {
          "Description": "The ARN of the ECS role",
          "Value": {
              "Fn::GetAtt": [
                  "ECSTaskExecutionRole",
                  "Arn"
              ]
          },
          "Export": {
              "Name": "ECSTaskExecutionRole"
          }
      },
      "VPCId": {
        "Description": "The ID of the VPC that this stack is deployed in",
        "Value": {
            "Ref": "VPC"
        },
        "Export": {
            "Name": "FargateClusterVPCId"
        }
    },
    "PublicSubnetOne": {
      "Description": "Public subnet A",
      "Value": {
          "Ref": "SubnetAPublic"
      },
      "Export": {
          "Name": {
              "Fn::Join": [
                  ":",
                  [
                      {
                          "Ref": "AWS::StackName"
                      },
                      "PublicSubnetOne"
                  ]
              ]
          }
      }
  },
  "PublicSubnetTwo": {
      "Description": "Public subnet B",
      "Value": {
          "Ref": "SubnetBPublic"
      },
      "Export": {
          "Name": {
              "Fn::Join": [
                  ":",
                  [
                      {
                          "Ref": "AWS::StackName"
                      },
                      "PublicSubnetTwo"
                  ]
              ]
          }
      }
  },
  "PrivateSubnetOne": {
      "Description": "Private subnet one",
      "Value": {
          "Ref": "SubnetAPrivate"
      },
      "Export": {
          "Name": "ECSPrivateSubnetOne"
      }
  },
  "PrivateSubnetTwo": {
      "Description": "Private subnet two",
      "Value": {
          "Ref": "SubnetBPrivate"
      },
      "Export": {
          "Name": "ECSPrivateSubnetTwo"
      }
  },
    "FargateContainerSecurityGroup": {
      "Description": "A security group for Fargate containers, tasks, and services",
      "Value": {
          "Ref": "FargateContainerSecurityGroup"
      },
      "Export": {
          "Name": "ECSFargateContainerSecurityGroup"
      }
    }
  }
}